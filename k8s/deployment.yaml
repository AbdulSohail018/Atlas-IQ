apiVersion: apps/v1
kind: Deployment
metadata:
  name: glonav-backend
  namespace: glonav
  labels:
    app: glonav
    component: backend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: glonav
      component: backend
  template:
    metadata:
      labels:
        app: glonav
        component: backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/your-org/glonav-backend:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: PORT
          value: "8000"
        envFrom:
        - configMapRef:
            name: glonav-config
        - secretRef:
            name: glonav-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: data-volume
          mountPath: /data
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: glonav-data-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: glonav-frontend
  namespace: glonav
  labels:
    app: glonav
    component: frontend
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: glonav
      component: frontend
  template:
    metadata:
      labels:
        app: glonav
        component: frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/your-org/glonav-frontend:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.glonav.example.com"
        - name: NEXT_PUBLIC_WS_URL
          value: "wss://api.glonav.example.com"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: glonav-orchestration
  namespace: glonav
  labels:
    app: glonav
    component: orchestration
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: glonav
      component: orchestration
  template:
    metadata:
      labels:
        app: glonav
        component: orchestration
    spec:
      containers:
      - name: orchestration
        image: ghcr.io/your-org/glonav-orchestration:latest
        envFrom:
        - configMapRef:
            name: glonav-config
        - secretRef:
            name: glonav-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: data-volume
          mountPath: /data
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: glonav-data-pvc

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: glonav
  labels:
    app: glonav
    component: postgres
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: glonav
      component: postgres
  template:
    metadata:
      labels:
        app: glonav
        component: postgres
    spec:
      containers:
      - name: postgres
        image: pgvector/pgvector:pg15
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: glonav
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: glonav-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: neo4j
  namespace: glonav
  labels:
    app: glonav
    component: neo4j
spec:
  serviceName: neo4j
  replicas: 1
  selector:
    matchLabels:
      app: glonav
      component: neo4j
  template:
    metadata:
      labels:
        app: glonav
        component: neo4j
    spec:
      containers:
      - name: neo4j
        image: neo4j:5.13
        ports:
        - containerPort: 7474
          name: http
        - containerPort: 7687
          name: bolt
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: glonav-secrets
              key: NEO4J_AUTH
        - name: NEO4J_PLUGINS
          value: '["apoc", "graph-data-science"]'
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        - name: neo4j-logs
          mountPath: /logs
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
  volumeClaimTemplates:
  - metadata:
      name: neo4j-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi
  - metadata:
      name: neo4j-logs
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: glonav
  labels:
    app: glonav
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: glonav
      component: redis
  template:
    metadata:
      labels:
        app: glonav
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command: ["redis-server", "--appendonly", "yes"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama
  namespace: glonav
  labels:
    app: glonav
    component: ollama
spec:
  replicas: 1
  selector:
    matchLabels:
      app: glonav
      component: ollama
  template:
    metadata:
      labels:
        app: glonav
        component: ollama
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: ollama
        env:
        - name: OLLAMA_HOST
          value: "0.0.0.0"
        volumeMounts:
        - name: ollama-data
          mountPath: /root/.ollama
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
            nvidia.com/gpu: 1
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
      volumes:
      - name: ollama-data
        persistentVolumeClaim:
          claimName: ollama-data-pvc
      nodeSelector:
        gpu: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prefect-server
  namespace: glonav
  labels:
    app: glonav
    component: prefect-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: glonav
      component: prefect-server
  template:
    metadata:
      labels:
        app: glonav
        component: prefect-server
    spec:
      containers:
      - name: prefect-server
        image: prefecthq/prefect:2.14-python3.11
        command: ["prefect", "server", "start", "--host", "0.0.0.0"]
        ports:
        - containerPort: 4200
          name: prefect
        env:
        - name: PREFECT_UI_URL
          value: "http://0.0.0.0:4200/api"
        - name: PREFECT_API_URL
          value: "http://0.0.0.0:4200/api"
        - name: PREFECT_SERVER_API_HOST
          value: "0.0.0.0"
        volumeMounts:
        - name: prefect-data
          mountPath: /root/.prefect
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: prefect-data
        persistentVolumeClaim:
          claimName: prefect-data-pvc